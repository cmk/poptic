cabal-version: >= 1.10

name:           profunctor-optics
version:        0.0.0.1
synopsis:       A profunctor optics library compatible with the typeclasses in 'profunctors'.
description:  
  This package provides some utilities for manipulating profunctor-based optics. It has a few design goals:
  .
  Be interoperable. All that is required to create optics is the `profunctors` package, which is heavily used and likely to end up in `base` at some point. Optics compose with `(.)` from `Prelude` as is typical. If you want to provide profunctor optics for your own types in your own libraries, then you can do so without incurring a dependency on this package. Names of things are kept fairly close to the `lens` versions for compatibility and comprehension. Conversions to & from the Van Laarhoven representations are provided for each optic type.
  .
  .
  Be simple. Optics are complex enough without adding implementation noise. There are no inscrutable internal modules, lawless or otherwise ancillary typeclasses, or heavy type-level machinery. The language extensions doing the majority of the work are `RankNTypes` and `QuantifiedConstraints`. 
  . 
  .
  Be correct. Optics have clear laws that should be tested in cases when they are written by hand. Operators should obey the <https://en.wikipedia.org/wiki/Principle_of_least_astonishment principle of least astonishment> and generate type errors when presented with an incompatible optic rather than do something sneaky  
  .
  .
  Be flexible. Profunctor optics are an area of active exploration, and new optics and use cases are still being discovered. Corepresentable optics for example have use cases in rounding and resource handling that remain largely unexplored. Therefore it's useful not to over-prescribe a hierarchy.
  .
  .
  Be performant. Pure data access and mutation shouldn't be the bottleneck in your application.
  .
  .
  .
  If you're new to profunctors, <https://www.youtube.com/watch?v=OJtGECfksds this talk> by Phil Freeman and the < https://github.com/hablapps/DontFearTheProfunctorOptics/blob/master/Optics.md Don't Fear the Profunctor Optics > series are good general introductions.

category:       Data, Lenses
homepage:       https://github.com/cmk/profunctor-extras
bug-reports:    https://github.com/cmk/profunctor-extras/issues
author:         Chris McKinlay
maintainer:     Chris McKinlay
copyright:      2019 Chris McKinlay
license:        BSD3
license-file:   LICENSE
build-type:     Simple
extra-source-files:  ChangeLog.md

source-repository head
  type: git
  location: https://github.com/cmk/profunctor-extras

library
  exposed-modules:
      Control.Exception.Optic

      Data.Connection.Optic
      Data.Connection.Optic.Int
      Data.Connection.Optic.Word
      Data.Connection.Optic.Float

      Data.Profunctor.Optic
      Data.Profunctor.Optic.Type
      Data.Profunctor.Optic.Operator
      Data.Profunctor.Optic.Iso
      Data.Profunctor.Optic.View
      Data.Profunctor.Optic.Setter
      Data.Profunctor.Optic.Lens
      Data.Profunctor.Optic.Prism
      Data.Profunctor.Optic.Grate
      Data.Profunctor.Optic.Fold
      Data.Profunctor.Optic.Repn
      Data.Profunctor.Optic.Traversal
      Data.Profunctor.Optic.Property

  other-modules: Data.Profunctor.Optic.Import

  default-language: Haskell2010

  hs-source-dirs:
      src
  default-extensions: 
      ConstraintKinds
      RankNTypes 
      MultiParamTypeClasses 
      OverloadedStrings 
      FlexibleContexts
      FlexibleInstances 
      ExistentialQuantification
      NoImplicitPrelude
      QuantifiedConstraints
      ScopedTypeVariables
      TupleSections
      TypeOperators
      TypeApplications
      TypeFamilies

  ghc-options: -Wall -Wincomplete-uni-patterns -Wincomplete-record-updates
  build-depends:
      base >=4.9 && <5.0
    , comonad
    , connections
    , contravariant
    , distributive
    , mtl
    , newtype-generics
    , profunctor-arrows
    , profunctors
    , rings
    , semigroupoids
    , tagged
    , unliftio-core

test-suite doctests
  type:              exitcode-stdio-1.0
  main-is:           doctests.hs
  ghc-options:       -Wall -threaded
  hs-source-dirs:    test
  default-language:  Haskell2010
  x-doctest-options: --fast

  build-depends:
      base
    , containers
    , doctest >= 0.8
    , mtl
    , profunctor-optics

  default-extensions: 
      ConstraintKinds
      RankNTypes 
      MultiParamTypeClasses 
      OverloadedStrings 
      FlexibleContexts
      FlexibleInstances 
      ExistentialQuantification
      QuantifiedConstraints
      ScopedTypeVariables
      TupleSections
      TypeOperators
      TypeApplications
      TypeFamilies
